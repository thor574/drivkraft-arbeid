13. november 2022, Bergen.

Jeg trengte et prosjekt for å øve på mikrotjenester og virvlet opp et navn:

- Drivkraft -

Dette virker som et kult produktnavn innen motivasjon/todoapp bransjen, som jeg kunne tenkt meg å utvikle en løsning for, først og fremst til bruk for meg selv.  Jeg laget en skisse som binder sammen de ulike delene fra database, modell, view, via bønner, API, til klient og nettside, se en dia/png-fil fra i går. Jeg lager en plan for hvordan få opp en enkel mikrotjeneste:

Plan Drivkraft - Arbeid (modul)

	Mikrotjeneste
v	Trinn 1: Lag prosjekt, på github
v	Trinn 2: Lag datamodell
v	Trinn 3: Lag bønne
v	Trinn 4: Lag API med Spring Data Rest
v		http://localhost:8080/
v		http://localhost:8080/kategorier
v		http://localhost:8080/oppgaver
v		http://localhost:8080/profile

	Mikroløsning
	Trinn 5: Lag nettsider med reactjs og bootstrap
	Trinn 6: Slipp til azure

	Trinn 7: Fullfør. Utvide hvert ledd til mikrotjenesten og mikroløsningen har tilstrekkelig fornuftige CRUD funksjoner og nyttig design.

For å velge versjoner i teknologistakken må jeg først innhente litt informasjon så avhengighetene av hverandre blir tydelig.

Teknologistakk:
	STS (Spring Tool Suite), istedenfor Eclipse 2022-09 (har spring innebygget fra start)
	Gradle 7.5.1, istedenfor Maven 3.8.6 (årsak: vil prøve 'gradle init' kommando) (oppdaget at gradle refresh fjerner valgt Java 19, må velge den på nytt i STS)
	Java må bli 18
		Dagens STS støtter kun opp til 18.
		Spring Boot 3.0.0rc2 (siste) - krever Java 17-19, Spring 6.0.0rc4, maven 3.5, gradle 7.5+
		Spring Framework 6.0.0rc4 (siste) - bygger på jee 9+ (servlet 5.0+, jpa 3.0+), støtter jee 10, virker med tomcat 10.1, jetty 11, undertow 2.3
		Spring Data Rest 4
	JEE 10 (siste) krever Java 11+
	Tomcat 10.1 (impl. deler av JEE 10) (servlet 6.0, JSP 3.1)

Dette gir rammene for utvikling av applikasjoner som er devops- og skyvennlige, fordi Spring Boot ligger i bunn.  Dette er standard i 2022, ref. seksjon 2 om Springs historie på https://docs.spring.io/spring-framework/docs/6.0.0-RC4/reference/html/overview.html#overview-getting-started

Senere:
	Utvid API med Spring REST Docs (et alternativ til swagger/openAPI)
	
	Lag nettside med klient Reactjs og Bootstrap
	
	Oppgrader til nonblocking, reaktive løsninger, Spring Data R2DBC, se eksempel https://github.com/spring-projects/spring-data-examples/tree/main/r2dbc/example
	
	Utvid skybiten med Docker, Spring Cloud, Kubernetes, Terraform
